1. Transition이란?
=> CSS 프로퍼티의 값이 변경될 떄 값의 변화가 일정 시간에 걸쳐 일어나도록 하는 것이다.

transition : 1,2,3,4
1 => 감시할 프로퍼티 transition : opacity, transform (all을 사용하여 모든 프로퍼티를 감시할 수 있다.)
2 => 실행 시간 transition : opacity 0.5s(500ms) transform 500ms
3 => ease-in(느리게 시작하여 빠르게 끝낸다.), ease-out(빠르게 시작하여 늦게 끝낸다.)
4. => transition을 발동시키기 전에 지연시간

1-1. transition-property 
=> 트랜지션의 대상이 되는 CSS 프로퍼티를 지정한다.
=> default는 all

1-2. transition-duration
=> 트랜지션이 일어나는 지속시간(duration)을 초 단위(s) 또는 밀리 초 단위(ms)로 지정한다.
=> default는 0s

1-3. transition-timing-function	
=> 트랜지션 효과를 위한 수치 함수를 지정한다.
=> default는 ease

1-4. transition-delay	
=> 프로퍼티가 변화한 시점과 트랜지션이 실제로 시작하는 사이에 대기하는 시간을 초 단위(s) 또는 밀리 초 단위(ms)로 지정
=> default는 0s


2. CSS Timing Functions
transition 전환 시간의 흐름을 쉽게 컨트롤하기 위해 다양한 값을 사용할 수 있다.
(https://easings.net/ko#easeInSine)에서 transition-duration으로 사용할 값 찾을 수 있다.


3. 트랜지션 및 display
display를 변경할 경우 transition에 의해 감지될 수 없다.
=> transition을 통해 display을 none => block/inline으로 바꾸려면 JS를 사용해야 한다.


4. CSS Animation
정의 : CSS Transitions ++라고도 하여 더 많은 제어를 할 수 있는 애니메이션 Property이다.
        키 프레임을 정의함으로써 특정시간에 요소의 스타일을 제어할 수 있다.

특징
4-1. 변화과정의 중간과정을 더욱 세밀하게 컨트롤하고 싶다면 animation property 사용이 유리
4-2. 애니메이션 성능이 JS보다 더 좋다./ 애니메이션을 사용하면 요소의 변화 프로퍼티를 오버라이딩한다.

4-3. animation : name duration delay time-func iteration(반복 횟수) fill-mode play-state

4-4. animation-name : @keyframe의 이름

4-5. animation-duration : 한 싸이클의 애니메이션이 얼마에 걸쳐 일어날지 지정

4-6. animation-delay :엘리먼트가 로드되고 나서 언제 애니메이션이 시작될지 지정합니다.

4-7. animation-direction : 애니메이션이 종료되고 다시 처음부터 시작할지 역방향으로 진행할지 지정합니다.

4-8. animation-iteration-count : 애니메이션이 몇 번 반복될지 지정합니다. infinite 로 지정하여 무한히 반복가능.

4-9. animation-play-state : 애니메이션을 멈추거나 다시 시작할 수 있습니다.

4-10. animation-timing-function : 중간 상태들의 전환을 어떤 시간간격으로 진행할지 지정합니다.
=> 키 프레임의 

4-11. animation-fill-mode : 애니메이션이 시작되기 전이나 끝나고 난 후 어떤 값이 적용될지 지정합니다.

4-12 @keyframes name {
    from(0%){

    }

    (중간에 n%을 줘서 frame 생성 가능)

    to(100%) {

    }
}



