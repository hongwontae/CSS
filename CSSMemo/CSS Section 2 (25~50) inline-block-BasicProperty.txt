1. CSS 박스 모델
CSS는 HTML 요소를 인식할 떄 박스로 인식한다.
해당 박스는 두 가지 개념으로 나뉘는데 inline 박스와 Block 박스이다.

일반적인 태그는 1 .content가 존재하고 2. content와 테두리 사이의 공간 padding, 3. 바같쪽 여백 margin이 존재한다.
margin은 브라우저에 의해 default 값이 항상 존재한다.


2. 여백 상쇄 이해 및 바깥쪽 여백 기본값 제거
Browser에 의해 body의 margin과 display : block이 적용되어 있다.

여백 상쇄 => 두 개의 박스가 밀접했을 떄 각자의 여백을 따로 가지는 것이 아니라 더 큰 값이 작은 값을 잡아먹는다.

h1,h2 같은 요소들은 독자적으로 margin을 갖는다. => default 값으로 margin을 갖는다. (위, 아래)


3. 축약 프로퍼티
border => border-width, border-style, border-color 등이 존재한다.
축약 => border : 2px black solid 처럼 축약해서 사용가능

margin : 5px 10px, 5px, 10px (top, right, bottom, left)
margin : top, bottom
margin : All
=> padding도 이를 따른다.


4. height and width
인라인 요소와 블록 요소에 따라 다르게 적용된다.

인라인 요소는 height고 width의 효과 적용이 되지 않는다.

블록 요소
auto 값으로 width나 height이 100%로 적용되어 있다.
=> 이 떄 width는 부모 요소 width 전체/ height은 컨텐츠 크기만큼

단위를 사용하면 단위 값을 따라간다.


5. box-sizing
box-sizing은 요소의 height와 width의 적용 방법을 의미한다.
content-box => 요소의 height과 width을 적용할 때 컨텐츠만 적용된다. padding과 border는 각자의 값이 존재한다.
border-box => 요소의 height과 width을 적용할 떄 컨텐츠+padding+border을 합친 값이다.

상속을 통해 자식들을 적용시킬 수 없다. => 속성 값으로 content-box 지정되었기 때문이다.
=> * 전체 선택자를 사용해서 구현한다. => 전체 선택자 > 속성 > 상속의 우선순위 떄문에 그렇다.


6. display
display : block => inline 요소를 block 요소로 바꾼다.
display : inline => block 요소를 inline 요소로 바꾼다.
display : none => 요소를 문서대열에서 이탈시킨다.
display : inline-block => 요소는 반인반블이 된다. => 나란히 나열되지만 각자 margin과 padding을 가질 수 있다.

display는 상속되는 개념이 아니다.

padding 1px => 578x71
none padding => 580 x 55
=> padding에 값을 주면 높이 값이 먼저 올라가고 다음으로 넓이가 증가한다.

display : none
=> 문서 대열이 없고 다른 요소들이 해당 공간을 차지할 수 있다. => DOM에서 사라진다.
visibility : hidden => 요소를 숨기지만 다른 요소들이 해당 공간을 차지할 수 없다. => DOM에서 사라지지 않는다.


7. 블록 요소/ 인라인 요소
블록 요소 => width(100%)/ 쌓이며 렌더링된다.
인라인 요소 => 패딩, 마진 의미없다/ 높이 넓이 의미없다(컨텐츠 크기 만큼 가진다.)/ 옆에 쌓인다.


8. display : inline-block
ul의 속성은 padding-left가 40, margin 일정부분을 가지고 있다. => 의도치 않은 결과가 나오면 태그가 가지고 있는 CSS 속성부터 파악하자.
상속은 무조건 되는 것이 아니다. => 특정 CSS가 상속되고 태그 자체가 상속을 거부하는 경우도 존재한다. => a태그..

width 100%를 갖는다는 것은 부모의 라인 하나를 전체 먹겠다는 이야기이다.

inline-block은 html의 공백을 문자로 간주되어 추가 인라인 요소로 추가된다.
=> 공백 너비가 된다는 것이다.


9. text-decoration/ vertical-align
text-decoration => text에 효과를 주는 CSS (baseline, wave, etc...)
ex) a태그에 baseline을 none으로 => 깔끔한 효과

vertical-align
=> 부모의 컨텐츠 인라인에 영향을 많이 받는다.
=> ex) p태그안에 span 태그가 있고 p 태그는 문자를 갖으면 p 태그의 문자Size(다른 컨텐츠일 수 도 있다.)가 부모가 되는 것이다.
=> top : 부모 상단
=> middle : 부모 요소 중앙
=> bottom : 부모 요소 하단


10. a 태그 스타일링
a태그의 CSS 속성이 상속보다 높은 우선순위를 가지기 떄문에 부모주는 것은 의미없다.
=> 직접 타켓해야 한다.
text-decoration의 경우 underline이 default이기 떄문에 직접 타켓한다.


11. 의사 클래스(가상 클래스)
pseudo class => 요소의 특수 상태에 대한 스타일을 정의할 수 있도록 한다. => 선택하려는 항목에 대해 더 정확하게 지정할 수 있게 해준다.
element::hover => 마우스가 해당 요소 위에 있을 떄 요소의 스타일을 변경한다.
element::active => 마우스가 해당 요소를 클릭하는 순간부터 뗴는 순간까지 요소이 스타일을 변경한다.
element::focus => 마우스가 해당 요소를 클릭하면 요소의 스타일을 변경한다.

pseudo element => 요소의 특정 부분의 스타일을 정의할 수 있다. => 요소의 특정 부분을 선택한다.

class => 요소의 상태
element => 요소의 부분


12. 그룹화 규칙
css 규칙이 한 요소에 한 css을 지켜줘야 하는 것은 아니다.
css가 같다면 그룹을 묶어서 규정해도 된다.

=>
.main-nav__item a:hover,
.main-nav__item a:hover {
    color: white;
}


13. font-weight/ border
font-weight => 글씨 두꺠를 의미한다.
border => content와 padding을 덮는다.


14. CTA 버튼 추가 및 스타일링하기
BEM 명명법 => 상태와 사용자가 설정한 상태 이름을 두 개의 대시(--) 기호로 구분한다.
CTA(클릭 유도) main-nav__item--cta


15. 프로젝트에 배경 이미지 추가하기
background : url()
=> http or local 둘 다 가능





























